// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String?
  password   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  ongs       Ong?
  profile    Profile?
  volunteers Volunteer[]
}

model Profile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  bio       String?
  image     String?
}

model Ong {
  id        String    @id @default(cuid())
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  actions   Actions[]
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
}

model Actions {
  id           String      @id @default(cuid())
  title        String
  startDate    DateTime
  endDate      DateTime
  descriptions String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  ong          Ong         @relation(fields: [ongId], references: [id])
  ongId        String
  Volunteer    Volunteer[]
}

model Volunteer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    Actions  @relation(fields: [actionId], references: [id])
  actionId  String

  @@unique([userId, actionId])
}
