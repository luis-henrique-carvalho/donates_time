generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  compoundId         String    @unique @map("compound_id")
  userId             String    @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], map: "providerAccountId")
  @@index([providerId], map: "providerId")
  @@index([userId], map: "userId")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id              String      @id @default(cuid())
  name            String?
  email           String?     @unique
  emailVerified   DateTime?   @map("email_verified")
  image           String?
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @default(now()) @map("updated_at")
  confirmPassword String?
  password        String?
  ong             Ong?
  profile         Profile?
  volunteers      Volunteer[]
  Session         Session[]

  @@map("users")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

model Profile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  bio       String?
  image     String?
  user      User     @relation(fields: [userId], references: [id])
}

model Ong {
  id        String    @id @default(cuid())
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String    @unique
  actions   Actions[]
  user      User      @relation(fields: [userId], references: [id])
}

model Actions {
  id           String      @id @default(cuid())
  title        String
  startDate    DateTime
  endDate      DateTime
  descriptions String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  ongId        String
  ong          Ong         @relation(fields: [ongId], references: [id])
  Volunteer    Volunteer[]
}

model Volunteer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  actionId  String
  action    Actions  @relation(fields: [actionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, actionId])
}
