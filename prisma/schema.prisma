generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String      @id @default(cuid())
  name                   String?
  email                  String      @unique
  emailVerified          DateTime?
  image                  String?
  role                   UserRole    @default(DEFAULT)
  password               String?
  isTwoFactorAuthEnabled Boolean     @default(false)
  twoFactorAuthVerified  DateTime?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  accounts               Account[]
  ong                    Ong?
  volunteers             Volunteer[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  scope             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  access_token      String?
  expires_at        Int?
  id_token          String?
  refresh_token     String?
  session_state     String?
  token_type        String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Ong {
  id        String   @id @default(cuid())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  actions   Action[]
  user      User     @relation(fields: [userId], references: [id])
}

model Action {
  id           String      @id @default(cuid())
  title        String
  startDate    DateTime
  endDate      DateTime
  descriptions String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  ongId        String
  ong          Ong         @relation(fields: [ongId], references: [id])
  volunteers   Volunteer[]
}

model Volunteer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  actionId  String
  action    Action   @relation(fields: [actionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, actionId])
}

enum UserRole {
  DEFAULT
  ADMIN
}
